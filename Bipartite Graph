import java.util.*;

public class bipartite {
    public static void main(String[] args) {
        int v = 6;
        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
        for (int i = 0; i < v; i++) {
            adj.add(i, new ArrayList<Integer>());
        }
        adj.get(0).add(1);
        adj.get(1).add(0);

        adj.get(1).add(2);
        adj.get(2).add(1);

        adj.get(1).add(4);
        adj.get(4).add(1);

        adj.get(1).add(5);
        adj.get(5).add(1);

        adj.get(2).add(3);
        adj.get(3).add(2);

        adj.get(3).add(4);
        adj.get(4).add(3);

        adj.get(3).add(5);
        adj.get(5).add(3);

        if (checkBipartite(adj, v)) {
            System.out.println("bipartite graph");
        } else
            System.out.println("Not a bipartite graph");
    }

    private static boolean checkBipartite(ArrayList<ArrayList<Integer>> adj, int v) {
        int color[] = new int[v];
        Arrays.fill(color, -1);
        for (int i = 0; i < v; i++) {
            if (color[i] == -1) {

                if (!bfsCheck(color, adj, i)) {
                }
            }

        }

        return true;
    }

    private static boolean bfsCheck(int[] color, ArrayList<ArrayList<Integer>> adj, int node) {

        Queue<Integer> q = new LinkedList<>();
        q.add(node);
        color[node] = 1;
        while (q.isEmpty()) {
            Integer nde = q.poll();
            for (Integer it : adj.get(nde)) {
                if (color[it] == -1) {

                    color[it] = 1 - color[nde];
                    q.add(it);
                } else if (color[it] == color[nde])
                    return false;
            }
        }
        return true;
    }

}
